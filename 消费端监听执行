<?php   
$pid = pcntl_fork();  
  echo 'fisrt pid is '.$pid."\n";
if ($pid == -1)  
{  
    throw new Exception('fork子进程失败');  
}  
elseif ($pid > 0)  
{  
    //父进程退出,子进程变成孤儿进程被1号进程收养，进程脱离终端  
    exit(0);  
}  
  
// 最重要的一步，让该进程脱离之前的会话，终端，进程组的控制  
$gid = posix_setsid();  

 echo ' gid is '.$gid."\n";
  
// 修改当前进程的工作目录，由于子进程会继承父进程的工作目录，修改工作目录以释放对父进程工作目录的占用。  
chdir('/');  
  
/* 
 * 通过上一步，我们创建了一个新的会话组长，进程组长，且脱离了终端，但是会话组长可以申请重新打开一个终端，为了避免 
 * 这种情况，我们再次创建一个子进程，并退出当前进程，这样运行的进程就不再是会话组长。 
 */  
$pid = pcntl_fork();  

 echo 'second pid is '.$pid."\n";
if ($pid == -1)  
{  
    throw new Exception('fork子进程失败');  
}  
elseif ($pid > 0)  
{  
    //  再一次退出父进程，子进程成为最终的守护进程  
    exit(0);  
}  
  
// 由于守护进程用不到标准输入输出，关闭标准输入，输出，错误输出描述符  
// fclose(STDIN);  
// fclose(STDOUT);  
// fclose(STDERR);  
  
/* 
 * 处理业务代码 
 */  
  
while(TRUE)  
{  
    getMessage();
    sleep(2);  
}

function getMessage(){
    //连接RabbitMQ  
$conn_args = array( 'host'=>'localhost' , 'port'=> '5672', 'login'=>'guest' , 'password'=> 'guest','vhost' =>'/');  
$conn = new AMQPConnection($conn_args);  
$conn->connect();  
//设置queue名称，使用exchange，绑定routingkey  
$channel = new AMQPChannel($conn);  
$q = new AMQPQueue($channel);  
$q->setName('queue_name');  
$q->setFlags(AMQP_DURABLE | AMQP_AUTODELETE);  
$q->declare();  
$q->bind('direct_exchange_name', 'routingkey_name');     
//消息获取  
$messages = $q->get(AMQP_AUTOACK) ;  
if ($messages){  
      var_dump(json_decode($messages->getBody(), true ));  
}  
$conn->disconnect();
}
